/*
 * @copyright (c) 2001 Chelsea Market Systems LLC
 *
 * formatted with JxBeauty (c) johann.langhofer@nextra.at
 */
/*
 History:
 +------+------------+-----------+-----------+----------------------------------------------+
 | Ver# | Date       | By        | Defect #  | Description                                  |
 +------+------------+-----------+-----------+----------------------------------------------+
 | 3    | 06-08-2005 | Vikram    | 123       |Item Return Screen flow issue                 |
 +------+------------+-----------+-----------+----------------------------------------------+
 | 2    | 04-11-2005 | Khyati    | N/A       |1.Return Specification                        |
 ---------------------------------------------------------------------------------------------
 | 1    | 04-11-2005 | Khyati    | N/A       | Base                                         |
 +------+------------+-----------+-----------+----------------------------------------------+
 */


package com.chelseasystems.cs.swing.returns;

import com.chelseasystems.cr.appmgr.*;
import com.chelseasystems.cr.appmgr.state.*;
import com.chelseasystems.cs.pos.CMSCompositePOSTransaction;


/**
 * Comments generated by AppBuilder. Do not modify.
 * 0. com.chelseasystems.cs.swing.pos.InitialSaleApplet
 * 1. com.chelseasystems.cs.swing.returns.OriginalConsultantApplet
 * 2. com.chelseasystems.cs.swing.returns.ReturnSaleApplet
 * 3. com.chelseasystems.cs.swing.returns.TxnHistCustApplet
 * 4. com.chelseasystems.cs.swing.returns.ReturnTxnHistoryApplet
 * 5. com.chelseasystems.cs.swing.returns.ReturnCustomerApplet
 * 6. com.chelseasystems.cs.swing.login.InitialLoginApplet
 * 7. com.chelseasystems.cs.swing.menu.PosMenuApplet
 */
public class InitialReturnApplet_State {

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  public int CANCEL(IApplicationManager theAppMgr)
      throws StateException {
    theAppMgr.goHome();
    return -1;
  }

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  public int ENTER_COMMENT(IApplicationManager theAppMgr)
      throws StateException {
    return -1;
  }

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  public int MERCH_RETURN(IApplicationManager theAppMgr)
      throws StateException {
    return -1;
  }

  /**
   *
   * @param theAppMgr IApplicationManager
   * @throws StateException
   * @return int
   */
  public int OK(IApplicationManager theAppMgr)
      throws StateException {
    CMSCompositePOSTransaction saleTxn = (CMSCompositePOSTransaction)theAppMgr.getStateObject(
        "TXN_POS");
    CMSCompositePOSTransaction returnTxn = (CMSCompositePOSTransaction)theAppMgr.getStateObject(
        "RETURN_TXN_POS");
    if (returnTxn == null) // MISC return...
      return 1;
    try {
      if (saleTxn.getConsultant() == null) {
        saleTxn.setConsultant(returnTxn.getConsultant());
      }
      if (saleTxn.getCustomer() == null) {
        if (returnTxn.getCustomer() != null) {
          saleTxn.setCustomer(returnTxn.getCustomer());
        } else {
          //Khyati: Added for Customer lookup Applet to redirect based on the this state object
          theAppMgr.addStateObject("ARM_DIRECT_TO", "RETURN_APPLET");
          theAppMgr.addStateObject("ARM_DIRECTED_FROM", "INITIAL_RETURN_APPLET");
          return 8;
        }
      } else if (saleTxn.getCustomer() != null && returnTxn.getCustomer() != null
          && (!saleTxn.getCustomer().getId().equals(returnTxn.getCustomer().getId()))) {
        //Khyati: Added for Customer lookup Applet to redirect based on the this state object
        theAppMgr.addStateObject("ARM_DIRECT_TO", "RETURN_APPLET");
        theAppMgr.addStateObject("ARM_DIRECTED_FROM", "INITIAL_RETURN_APPLET");
        return 8;
      } else {
        return 2;
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
    return 2;
  }

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  /*   public int OK (IApplicationManager theAppMgr) throws StateException {
   System.out.println("OK ");
   CMSCompositePOSTransaction saleTxn = (CMSCompositePOSTransaction)theAppMgr.getStateObject("TXN_POS");
   CMSCompositePOSTransaction returnTxn = (CMSCompositePOSTransaction)theAppMgr.getStateObject("RETURN_TXN_POS");
   System.out.println("OK " + returnTxn);
   if (returnTxn == null)  // MISC return...
   return  1;
   try {
   ////saleTxn.setVoidReason(getReturnReason());
   // (CG) completely redid the logic from here following. 8-16-00
   if (saleTxn.getConsultant() == null) {
   // System.out.println("Assigning the original cons from the return to the current txn");
   saleTxn.setConsultant(returnTxn.getConsultant());
   }
   // If saleTxn's cust is not equal to null then saleTxn came from somewhere
   // else and was not allocated here.
   if (saleTxn.getCustomer() != null) {
   //Commented to not enforce Customer telephone #: Khyati
   //            if (saleTxn.getCustomer().getTelephone().equals(CMSCustomer.UNKNOWN_CUSTOMER_PHONE)) {
   //               if (returnTxn.getCustomer() != null) {
   //                  if (returnTxn.getCustomer().getTelephone().equals(CMSCustomer.UNKNOWN_CUSTOMER_PHONE)) {
   //                     // In this instance both txn's have UNKNOWN customers so we will
   //                     // force the Eu to assign saleTxn a customer.
   //                     String msg = com.chelseasystems.cr.util.ResourceManager.getResourceBundle().getString(
   //                     "The customer phone number on the original transaction was not specified.  Please identify customer for return.");
   //                     theAppMgr.showErrorDlgLater(msg);
   //                     return  5;
   //                  }
   //                  else {
   //                     // Otherwise, saleTxn's cust is unidentified but the original
   //                     // customer is not, so we will take this opportunity to assign
   //                     // the original customer to saleTxn now.
   //                     saleTxn.setCustomer(returnTxn.getCustomer());
   //                     return  2;
   //                  }
   //               }
   //            }
   System.out.println("SALETXN: " + saleTxn.getCustomer() + " " + returnTxn.getCustomer());
   if (saleTxn.getCustomer().getId().equals(returnTxn.getCustomer().getId())){
   return 2;
   } else {
   saleTxn.setCustomer(returnTxn.getCustomer());
   return 2;
   }
   }
   // Else, saleTxn's cust is equal to null so it was allocated here.
   // So we check whether we can assign saleTxn a customer.
   else
   if (returnTxn.getCustomer() == null) {
   String msg = com.chelseasystems.cr.util.ResourceManager.getResourceBundle().getString(
   "Cannot find the customer for the original transaction.  Please identify customer for return."
   );
   theAppMgr.showErrorDlgLater(msg);
   return  5;
   }
   //         else if (returnTxn.getCustomer().getTelephone().equals(CMSCustomer.UNKNOWN_CUSTOMER_PHONE)) {
   //            String msg = com.chelseasystems.cr.util.ResourceManager.getResourceBundle().getString(
   //            "The customer phone number on the original transaction was not specified.  Please identify customer for return.");
   //            theAppMgr.showErrorDlgLater(msg);
   //            return  5;
   //         }
   else {
   // In this instance the returnTxn cust is not null and is not UNKNOWN
   // so it is safe to assign saleTxn a value. The return line also
   // serves the case above where saleTxn's cust was not null but the
   // return cust was or was unidentified.
   saleTxn.setCustomer(returnTxn.getCustomer());
   }
   return  2;
   } catch (BusinessRuleException ex) {
   ex.printStackTrace();
   java.util.ResourceBundle res = com.chelseasystems.cr.util.ResourceManager.getResourceBundle();
   theAppMgr.showErrorDlg(res.getString(ex.getMessage()));
   return  -1;
   }
   catch (Exception ex) {
   ex.printStackTrace();
   java.util.ResourceBundle res = com.chelseasystems.cr.util.ResourceManager.getResourceBundle();
   theAppMgr.showErrorDlg(res.getString(ex.getMessage()));
   return  -1;
   }
   }
   */
  /**
   * This button does not exist, but is a convience method to goto this applet.
   */
  public int ORIG(IApplicationManager theAppMgr)
      throws StateException {
    return 1;
  }

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  public int PREV(IApplicationManager theAppMgr)
      throws StateException {
    boolean removeCustomer = true;
    int retVal = 0;
    if (theAppMgr.getStateObject("RE_ENTER") != null || theAppMgr.getStateObject("RETURN_MODE") != null) {
      if (theAppMgr.getStateObject("CASHIER_SESSION") != null) {
        retVal = 7;
      } else {
        if ("com.chelseasystems.cs.swing.returns.ReturnTxnHistoryApplet".equals(theAppMgr.
            getCallingApplet())) {
          removeCustomer = false;
        }
        if (theAppMgr.getStateObject("RETURN_MODE") != null)
          retVal = 7;
        else {
          theAppMgr.goBack();
          retVal = -1;
        }
      }
    }
    if (removeCustomer)
      theAppMgr.removeStateObject("CUSTOMER");
    theAppMgr.removeStateObject("RETURN_TXN_POS");
    theAppMgr.removeStateObject("TXN_MODE");
    return retVal;
  }

  /**
   * @param theAppMgr
   * @return
   * @exception StateException
   */
  public int TXN_HIST(IApplicationManager theAppMgr)
      throws StateException {
    return 5;
    //      CMSCompositePOSTransaction saleTxn = (CMSCompositePOSTransaction)theAppMgr.getStateObject("TXN_POS");
    //      if (saleTxn.getCustomer() == null || saleTxn.getCustomer().getTelephone().equals(CMSCustomer.UNKNOWN_CUSTOMER_PHONE)) {
    //         return  3;
    //      }
    //      else {
    //         theAppMgr.addStateObject("CUSTOMER", saleTxn.getCustomer());
    //         return  4;
    //      }
  }
}

